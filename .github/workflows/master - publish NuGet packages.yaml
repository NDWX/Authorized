name: master - build and NuGet publish

on:
  push:
    branches:
      - master

env:
  BuildConfiguration: release
  CommonProject: src/Pug.Authorized.Common/Pug.Authorized.Common.csproj
  MainProject: src/Pug.Authorized/Pug.Authorized.csproj
  PackagesBaseFolder: packages

jobs:
  build:
    name: Build and publish NuGet packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      # Authenticates packages to push to GPR
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x' # SDK Version to use.
          source-url: https://nuget.pkg.github.com/Authorized/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: SonarCloud Scan
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /o:ndwx /k:NDWX_Authorized /d:sonar.login=${{secrets.SONAR_TOKEN}}  /d:sonar.host.url=https://sonarcloud.io  /d:sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Restore NuGet packages
        run: dotnet restore ${{env.Solution}}

      - name: Build Main project
        run: dotnet build --nologo --no-restore --configuration ${{env.BuildConfiguration}} ${{env.MainProject}}

      - name: Run tests
        run: |
          dotnet build --nologo src/Pug.Authorized.Tests/Pug.Authorized.Tests.csproj
          dotnet test --nologo src/Pug.Authorized.Tests/Pug.Authorized.Tests.csproj --no-build --no-restore --verbosity normal -p:CollectCoverage=true -p:CoverletOutputFormat=opencover

      - name: End Sonar scan
        run: dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any

      - name: Create packages base folder
        run: mkdir packages
        
      - name: Pack Common project
        run: dotnet pack --no-build --output ${{env.PackagesBaseFolder}} --nologo --configuration ${{env.BuildConfiguration}} ${{env.CommonProject}}

      - name: Publish Common NuGet package
        run: dotnet nuget push ${{env.PackagesBaseFolder}}/*.nupkg --skip-duplicate

      - name: Publish Common NuGet package to NuGet.org
        run: dotnet nuget push ${{env.PackagesBaseFolder}}/*.nupkg --api-key ${{secrets.NUGET_APIKEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Clear packages folder
        run: rm packages/*.nupkg

      - name: Pack Main project
        run: dotnet pack --no-build --output ${{env.PackagesBaseFolder}} --nologo --configuration ${{env.BuildConfiguration}} ${{env.MainProject}}

      - name: Publish Main NuGet package
        run: dotnet nuget push ${{env.PackagesBaseFolder}}/*.nupkg --skip-duplicate

      - name: Publish Main NuGet package to NuGet.org
        run: dotnet nuget push ${{env.PackagesBaseFolder}}/*.nupkg --api-key ${{secrets.NUGET_APIKEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Clear packages folder
        run: rm packages/*.nupkg